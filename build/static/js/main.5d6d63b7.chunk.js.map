{"version":3,"sources":["Auth.js",".base.js","Shared/BaseContext.js","PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","pending","setPending","useEffect","app","auth","onAuthStateChanged","user","Provider","value","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","REACT_APP_FIREBASE_FIREBASE_APP_ID","firebase","ref","BaseContext","BaseProvider","accepted","setAccepted","PrivateRoute","RouteComponent","component","rest","useContext","render","routeProps","to","Home","lazy","NoMatch","MyFavourites","MyAdverts","Login","Signup","Listing","Advert","Post","Success","SearchListing","CookiePolicy","PrivacyPolicy","App","Auth","fallback","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d6d63b7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport app from \"./.base\";\n\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = ({ children }) => {\n\tconst [currentUser, setCurrentUser] = useState(null);\n\tconst [pending, setPending] = useState();\n\n\tuseEffect(() => {\n\t\tapp.auth().onAuthStateChanged((user) => {\n\t\t\tsetCurrentUser(user);\n\t\t\tsetPending(false);\n\t\t});\n\t}, []);\n\n\tif (pending) {\n\t\treturn <>Loading...</>;\n\t}\n\n\treturn (\n\t\t<AuthContext.Provider\n\t\t\tvalue={{\n\t\t\t\tcurrentUser,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</AuthContext.Provider>\n\t);\n};\n","import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/storage\";\nconst config = {\n\tapiKey: process.env.REACT_APP_FIREBASE_KEY,\n\tauthDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n\tdatabaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n\tprojectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n\tstorageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n\tmessagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n\tappId: process.env.REACT_APP_FIREBASE_FIREBASE_APP_ID,\n};\nconst app = firebase.initializeApp(config);\nexport const storage = firebase.storage().ref();\nexport default app;\n","import React, { useState } from \"react\";\n\nexport const BaseContext = React.createContext();\n\nexport const BaseProvider = ({ children }) => {\n\tconst [accepted, setAccepted] = useState(false);\n\treturn <BaseContext.Provider value={[accepted, setAccepted]}>{children}</BaseContext.Provider>;\n};\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"./Auth\";\n\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\n\tconst { currentUser } = useContext(AuthContext);\n\treturn <Route {...rest} render={(routeProps) => (!!currentUser ? <RouteComponent {...routeProps} /> : <Redirect to={\"/login\"} />)} />;\n};\n\nexport default PrivateRoute;\n","import React, { lazy, Suspense } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport { AuthProvider } from \"./Auth\";\nimport { BaseProvider } from \"./Shared/BaseContext\";\n\nimport PrivateRoute from \"./PrivateRoute\";\n\nconst Home = lazy(() => import(\"./Home\"));\nconst NoMatch = lazy(() => import(\"./NoMatch\"));\n\nconst MyFavourites = lazy(() => import(\"./Account/MyFavourites\"));\nconst MyAdverts = lazy(() => import(\"./Account/MyAdverts\"));\n\nconst Login = lazy(() => import(\"./Auth/Login\"));\nconst Signup = lazy(() => import(\"./Auth/Signup\"));\n\nconst Listing = lazy(() => import(\"./Advert/Listing\"));\nconst Advert = lazy(() => import(\"./Advert/Advert\"));\n\nconst Post = lazy(() => import(\"./Post\"));\nconst Success = lazy(() => import(\"./Success\"));\n\nconst SearchListing = lazy(() => import(\"./SearchListings\"));\n\nconst CookiePolicy = lazy(() => import(\"./Shared/Footer/CookiePolicy\"));\nconst PrivacyPolicy = lazy(() => import(\"./Shared/Footer/PrivacyPolicy\"));\n\nfunction App() {\n\treturn (\n\t\t<AuthProvider>\n\t\t\t<BaseProvider>\n\t\t\t\t<Suspense fallback={<div>Loading... </div>}>\n\t\t\t\t\t<BrowserRouter>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route exact component={Listing} path=\"/adverts/clothes\" />\n\t\t\t\t\t\t\t<Route exact component={Listing} path=\"/adverts/electronics\" />\n\t\t\t\t\t\t\t<Route exact component={Listing} path=\"/adverts/vehicles\" />\n\t\t\t\t\t\t\t<Route exact component={Listing} path=\"/adverts/toys\" />\n\t\t\t\t\t\t\t<Route exact component={Listing} path=\"/adverts/books\" />\n\n\t\t\t\t\t\t\t<Route exact path=\"/adverts\" component={Listing} />\n\t\t\t\t\t\t\t<Route exact path=\"/advert/:id\" component={Advert} />\n\t\t\t\t\t\t\t<PrivateRoute exact path=\"/post\" component={Post} />\n\t\t\t\t\t\t\t<PrivateRoute exact path=\"/edit/:id\" component={Post} />\n\t\t\t\t\t\t\t<PrivateRoute exact path=\"/success/:id/:status\" component={Success} />\n\t\t\t\t\t\t\t<PrivateRoute exact path=\"/account/myadverts\" component={MyAdverts} />\n\t\t\t\t\t\t\t<PrivateRoute exact path=\"/account/favourites\" component={MyFavourites} />\n\t\t\t\t\t\t\t<Route exact path=\"/login\" component={Login} />\n\t\t\t\t\t\t\t<Route exact path=\"/signup\" component={Signup} />\n\t\t\t\t\t\t\t<Route exact path=\"/search/:data\" component={SearchListing} />\n\t\t\t\t\t\t\t<Route component={CookiePolicy} path=\"/cookies\" />\n\t\t\t\t\t\t\t<Route component={PrivacyPolicy} path=\"/privacy-policy\" />\n\n\t\t\t\t\t\t\t<Route component={Home} exact path=\"/\" />\n\n\t\t\t\t\t\t\t<Route>\n\t\t\t\t\t\t\t\t<NoMatch />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</BrowserRouter>\n\t\t\t\t</Suspense>\n\t\t\t</BaseProvider>\n\t\t</AuthProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./custom.scss\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<main>\n\t\t\t<App />\n\t\t</main>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}